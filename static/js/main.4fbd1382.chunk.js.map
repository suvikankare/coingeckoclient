{"version":3,"sources":["api.js","Display.js","Trend.js","Profit.js","Volume.js","scrooge.png","App.js","index.js"],"names":["CoinGeckoClient","CoinGecko","fetchMarketChartRangeFunction","from","to","coins","fetchMarketChartRange","data","Display","bitcoin","trend","totaltrends","prices","forEach","b","i","price","previousDay","previousPrice","push","length","sorted","sort","a","downwardDays","downwardFrom","DateTime","fromMillis","toLocaleString","downwardTo","at","maxProfit","buyPrice","sellPrice","sellDay","buyDay","Math","min","max","find","p","profit","largestVolume","largest","apply","total_volumes","map","tv","d","volume","volumeDate","buydayFormatted","selldayFormatted","className","value","displayType","thousandSeparator","suffix","decimalScale","App","useState","Date","fromCalendarDate","setFromCalendarDate","toCalendarDate","setToCalendarDate","setBitcoin","handleSubmit","e","preventDefault","fromDate","fromISO","formatISO","toSeconds","toDate","onSubmit","selected","dateFormat","selectsStart","startDate","endDate","minDate","subDays","onChange","date","selectsEnd","addDays","maxDate","type","src","scrooge","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fbd1382.chunk.js","sourcesContent":["import CoinGecko from \"coingecko-api\";\r\n\r\nconst CoinGeckoClient = new CoinGecko();\r\n\r\nexport const fetchMarketChartRangeFunction = async (from, to) => {\r\n  const { data } = await CoinGeckoClient.coins.fetchMarketChartRange('bitcoin', {\r\n    from: from,\r\n    to: to,\r\n  });\r\n  return data;\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { DateTime } from 'luxon';\r\nimport NumberFormat from 'react-number-format';\r\nimport { sorted } from './Trend';\r\nimport { profit } from './Profit';\r\nimport { volume } from './Volume';\r\n\r\nconst Display = ({ bitcoin }) => {\r\n\r\n  const { downwardDays, downwardFrom, downwardTo } = sorted(bitcoin);\r\n  const { sellDay, buyDay, buyPrice, sellPrice, maxProfit } = profit(bitcoin.prices);\r\n  const largestVolume = volume(bitcoin);\r\n\r\n  const volumeDate = DateTime.fromMillis(largestVolume[0]).toLocaleString();\r\n  const buydayFormatted = DateTime.fromMillis(buyDay[0]).toLocaleString();\r\n  const selldayFormatted = DateTime.fromMillis(sellDay[0]).toLocaleString();\r\n\r\n  return (\r\n    <div className=\"box-container\">\r\n      <div className=\"box\">\r\n        <p><span className=\"redText\">{volumeDate}</span> was the highest trading volume of <span className=\"redText\"><NumberFormat value={largestVolume[1]} displayType={'text'} thousandSeparator={' '} suffix={'€'} decimalScale={2} /></span></p>\r\n      </div>\r\n\r\n      <div className=\"box\">\r\n        <p>The price decreased <span className=\"redText\">{downwardDays}</span> days in a row for the inputs from <span className=\"redText\">{downwardFrom}</span> and to <span className=\"redText\">{downwardTo}</span></p>\r\n      </div>\r\n\r\n      {maxProfit > 0 ? (\r\n        <>\r\n          <div className=\"box\">\r\n            <p>Best day to buy <span className=\"redText\">{buydayFormatted}</span> at price <span className=\"redText\"><NumberFormat value={buyPrice} displayType={'text'} thousandSeparator={' '} suffix={'€'} decimalScale={2} /></span></p>\r\n          </div>\r\n          <div className=\"box\">\r\n            <p>Best day to sell <span className=\"redText\">{selldayFormatted}</span> at price <span className=\"redText\"><NumberFormat value={sellPrice} displayType={'text'} thousandSeparator={' '} suffix={'€'} decimalScale={2} /></span></p>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div className=\"box boxFullWidth\">\r\n          <p>Best thing to do in this timeframe is to sit back, relax and wait.</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Display;\r\n","import { DateTime } from 'luxon';\r\n\r\nexport const sorted = (bitcoin) => {\r\n\r\n  // Create an array for downward trends\r\n  let trend = [];\r\n  const totaltrends = [];\r\n\r\n  // loop through prices\r\n  bitcoin && bitcoin.prices.forEach((b, i) => {\r\n    if (i === 0) return;\r\n    const [, price] = b;\r\n    const [previousDay, previousPrice] = bitcoin.prices[i - 1];\r\n    // if today's price is lower than yesterday, push to trend-array\r\n    if (price < previousPrice) trend.push({ previousDay, previousPrice })\r\n    // if not, stop previous step and push trend-array to totaltrends-array\r\n    else {\r\n      if (trend.length > 0) {\r\n        trend.push({ previousDay, previousPrice });\r\n        totaltrends.push(trend);\r\n      }\r\n      trend = [];\r\n    }\r\n  });\r\n\r\n  // find longest array from totaltrends = longest downward trend\r\n  const sorted = totaltrends.sort((a, b) => {\r\n    return b.length - a.length;\r\n  });\r\n\r\n  const downwardDays = sorted[0].length;\r\n  const downwardFrom = DateTime.fromMillis(sorted[0][0].previousDay).toLocaleString();\r\n  const downwardTo = DateTime.fromMillis(sorted[0].at(-1).previousDay).toLocaleString();\r\n\r\n  return { downwardDays, downwardFrom, downwardTo };\r\n}\r\n","export const profit = (prices) => {\r\n  let maxProfit = 0;\r\n  let buyPrice = prices[0][1];\r\n  let sellPrice = 0;\r\n  let sellDay = 0;\r\n  let buyDay = 0;\r\n  for (let i = 1; i < prices.length; i++) {\r\n    // find buy price and store it to buyPrice\r\n    buyPrice = Math.min(prices[i][1], buyPrice);\r\n    // find highest price and store it to sellPrice\r\n    sellPrice = Math.max(maxProfit, prices[i][1]);\r\n    // find highest difference between prices\r\n    maxProfit = Math.max(maxProfit, prices[i][1] - buyPrice);\r\n    // find cells holding dates from highest and lowest prices\r\n    sellDay = prices.find(p => p[1] === sellPrice);\r\n    buyDay = prices.find(p => p[1] === buyPrice);\r\n  }\r\n\r\n  return { sellDay, buyDay, buyPrice, sellPrice, maxProfit };\r\n};","export const volume = (bitcoin) => {\r\n  // Map total volumes to find largest value\r\n  const largest = Math.max.apply(Math, bitcoin.total_volumes.map((tv) => tv[1]))\r\n  // Find array holding the largest value\r\n  const largestVolume = bitcoin.total_volumes.find(d => d[1] === largest);\r\n  return largestVolume;\r\n}","export default __webpack_public_path__ + \"static/media/scrooge.d296bfeb.png\";","import React, { useState } from 'react';\r\nimport { fetchMarketChartRangeFunction } from './api';\r\nimport './App.css';\r\nimport { DateTime } from 'luxon';\r\nimport Display from './Display';\r\nimport scrooge from './scrooge.png';\r\nimport Datepicker from \"react-datepicker\";\r\nimport { formatISO, addDays, subDays } from 'date-fns';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst App = () => {\r\n  const [fromCalendarDate, setFromCalendarDate] = useState(new Date('2022-10-12'));\r\n  const [toCalendarDate, setToCalendarDate] = useState(new Date());\r\n  const [bitcoin, setBitcoin] = useState();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const fromDate = DateTime.fromISO(formatISO(fromCalendarDate)).toSeconds();\r\n    const toDate = DateTime.fromISO(formatISO(toCalendarDate)).toSeconds();\r\n    const data = await fetchMarketChartRangeFunction(fromDate, toDate);\r\n    setBitcoin(data);\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <h1>Scrooge McDuck's CoinGeckoClient</h1>\r\n      <div className=\"container\">\r\n        <div className=\"form\">\r\n          <p>Place the dates you want information from. Date range minimum 91 days and maximum 365 days.</p>\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"form-inputs\">\r\n              <div className=\"form-inputs__input\">\r\n                <Datepicker selected={fromCalendarDate} dateFormat=\"yyyy-MM-dd\" selectsStart startDate={fromCalendarDate} endDate={toCalendarDate} minDate={subDays(toCalendarDate, 365)} onChange={(date) => { setFromCalendarDate(date) }} />\r\n              </div>\r\n              <div className=\"form-inputs__input\">\r\n                <Datepicker selected={toCalendarDate} dateFormat=\"yyyy-MM-dd\" selectsEnd startDate={fromCalendarDate} endDate={toCalendarDate} minDate={addDays(fromCalendarDate, 91)} maxDate={addDays(fromCalendarDate, 365)} onChange={(date) => setToCalendarDate(date)} />\r\n              </div>\r\n            </div>\r\n            <button type=\"submit\">Select days</button>\r\n          </form>\r\n        </div>\r\n        <div className=\"content\">\r\n          {bitcoin && <Display bitcoin={bitcoin} />}\r\n        </div>\r\n      </div>\r\n      <img src={scrooge} className=\"footer-img\" alt=\"Scrooge McDuck's CoinGeckoClient\" />\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('page')\r\n);\r\n"],"sourceRoot":""}