{"version":3,"sources":["api.js","Display.js","Trend.js","Profit.js","Volume.js","scrooge.png","App.js","index.js"],"names":["CoinGeckoClient","CoinGecko","fetchMarketChartRangeFunction","from","to","a","coins","fetchMarketChartRange","data","Display","bitcoin","trend","totaltrends","prices","forEach","b","i","price","previousDay","previousPrice","push","length","sorted","sort","downwardDays","downwardFrom","DateTime","fromMillis","toLocaleString","downwardTo","at","maxProfit","buyPrice","sellPrice","sellDay","buyDay","Math","min","max","find","p","profit","largestVolume","largest","apply","total_volumes","map","tv","d","volume","volumeDate","buydayFormatted","selldayFormatted","className","value","displayType","thousandSeparator","suffix","decimalScale","App","useState","fromDate","setFromDate","toDate","setToDate","setBitcoin","handleSubmit","e","preventDefault","onSubmit","type","placeholder","onChange","formattedFromDate","fromISO","target","toSeconds","formattedToDate","src","scrooge","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1cad862.chunk.js","sourcesContent":["import CoinGecko from \"coingecko-api\";\r\n\r\nconst CoinGeckoClient = new CoinGecko();\r\n\r\nexport const fetchMarketChartRangeFunction = async (from, to) => {\r\n  const { data } = await CoinGeckoClient.coins.fetchMarketChartRange('bitcoin', {\r\n    from: from,\r\n    to: to,\r\n  });\r\n  return data;\r\n}\r\n\r\nexport default { fetchMarketChartRangeFunction };","import React from 'react';\r\nimport './App.css';\r\nimport { DateTime } from 'luxon';\r\nimport NumberFormat from 'react-number-format';\r\nimport { sorted } from './Trend';\r\nimport { profit } from './Profit';\r\nimport { volume } from './Volume';\r\n\r\nconst Display = ({ bitcoin }) => {\r\n\r\n  const { downwardDays, downwardFrom, downwardTo } = sorted(bitcoin);\r\n  const { sellDay, buyDay, buyPrice, sellPrice, maxProfit } = profit(bitcoin.prices);\r\n  const largestVolume = volume(bitcoin);\r\n\r\n  const volumeDate = DateTime.fromMillis(largestVolume[0]).toLocaleString();\r\n  const buydayFormatted = DateTime.fromMillis(buyDay[0]).toLocaleString();\r\n  const selldayFormatted = DateTime.fromMillis(sellDay[0]).toLocaleString();\r\n\r\n  return (\r\n    <div className=\"box-container\">\r\n      <div className=\"box\">\r\n        <h2>{volumeDate}</h2> was the highest trading volume of <h3><NumberFormat value={largestVolume[1]} displayType={'text'} thousandSeparator={' '} suffix={'€'} decimalScale={2} /></h3>\r\n      </div>\r\n\r\n      <div className=\"box\">\r\n        The price decreased <h2>{downwardDays}</h2> days in a row for the inputs from <h3>{downwardFrom}</h3> and to <h3>{downwardTo}</h3>\r\n      </div>\r\n\r\n      {maxProfit > 0 ? (\r\n        <div className=\"box\">\r\n          <p>Best day to buy {buydayFormatted} at price <NumberFormat value={buyPrice} displayType={'text'} thousandSeparator={' '} suffix={'€'} decimalScale={2} /></p>\r\n          <p>Best day to sell {selldayFormatted} at price <NumberFormat value={sellPrice} displayType={'text'} thousandSeparator={' '} suffix={'€'} decimalScale={2} /></p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"box\">\r\n          <p>Best thing to do in this timeframe is to sit back, relax and wait.</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Display;\r\n","import { DateTime } from 'luxon';\r\n\r\nexport const sorted = (bitcoin) => {\r\n\r\n  // Create an array for downward trends\r\n  let trend = [];\r\n  const totaltrends = [];\r\n\r\n  // loop through prices\r\n  bitcoin && bitcoin.prices.forEach((b, i) => {\r\n    if (i === 0) return;\r\n    const [, price] = b;\r\n    const [previousDay, previousPrice] = bitcoin.prices[i - 1]\r\n    // if today's price is lower than yesterday, push to trend-array\r\n    if (price < previousPrice) trend.push({ previousDay, previousPrice })\r\n    // if not, stop previous step and push trend-array to totaltrends-array\r\n    else {\r\n      if (trend.length > 0) {\r\n        trend.push({ previousDay, previousPrice })\r\n        totaltrends.push(trend);\r\n      }\r\n      trend = []\r\n    }\r\n  });\r\n\r\n  // find longest array from totaltrends = longest downward trend\r\n  const sorted = totaltrends.sort((a, b) => {\r\n    return b.length - a.length\r\n  });\r\n\r\n  const downwardDays = sorted[0].length;\r\n  const downwardFrom = DateTime.fromMillis(sorted[0][0].previousDay).toLocaleString();\r\n  const downwardTo = DateTime.fromMillis(sorted[0].at(-1).previousDay).toLocaleString();\r\n\r\n  return { downwardDays, downwardFrom, downwardTo };\r\n}\r\n","export const profit = (prices) => {\r\n  let maxProfit = 0;\r\n  let buyPrice = prices[0][1];\r\n  let sellPrice = 0;\r\n  let sellDay = 0;\r\n  let buyDay = 0;\r\n  for (let i = 1; i < prices.length; i++) {\r\n    // find buy price and store it to buyPrice\r\n    buyPrice = Math.min(prices[i][1], buyPrice);\r\n    // find highest price and store it to sellPrice\r\n    sellPrice = Math.max(maxProfit, prices[i][1]);\r\n    // find highest difference between prices\r\n    maxProfit = Math.max(maxProfit, prices[i][1] - buyPrice);\r\n    // find cells holding dates from highest and lowest prices\r\n    sellDay = prices.find(p => p[1] === sellPrice);\r\n    buyDay = prices.find(p => p[1] === buyPrice);\r\n  }\r\n\r\n  return { sellDay, buyDay, buyPrice, sellPrice, maxProfit };\r\n};","export const volume = (bitcoin) => {\r\n  // Map total volumes to find largest value\r\n  const largest = Math.max.apply(Math, bitcoin.total_volumes.map((tv) => tv[1]))\r\n  // Find array holding the largest value\r\n  const largestVolume = bitcoin.total_volumes.find(d => d[1] === largest);\r\n  return largestVolume;\r\n}","export default __webpack_public_path__ + \"static/media/scrooge.d296bfeb.png\";","import React, { useState } from 'react';\nimport { fetchMarketChartRangeFunction } from './api';\nimport './App.css';\nimport { DateTime } from 'luxon';\nimport Display from './Display';\nimport scrooge from './scrooge.png';\n\nconst App = () => {\n  const [fromDate, setFromDate] = useState(0)\n  const [toDate, setToDate] = useState(0)\n  const [bitcoin, setBitcoin] = useState()\n\n  // Format dates from user input\n  const handleSetFromDate = (e) => {\n    const formattedFromDate = DateTime.fromISO(e.target.value + 'T00:00').toSeconds();\n    setFromDate(formattedFromDate)\n  }\n\n  const handleSetToDate = (e) => {\n    const formattedToDate = DateTime.fromISO(e.target.value + 'T00:00').toSeconds();\n    setToDate(formattedToDate)\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const data = await fetchMarketChartRangeFunction(fromDate, toDate)\n    setBitcoin(data)\n  }\n\n  return (\n    <div className=\"main\">\n      <h1>Scrooge McDuck's CoinGeckoClient</h1>\n      <div className=\"container\">\n        <div className=\"form\">\n          <p>Place the dates you want information from. Please use format YYYY-MM-DD.</p>\n          <form onSubmit={handleSubmit}>\n            <div className=\"form-inputs\">\n              <div className=\"form-inputs__input\">\n                From <input type=\"text\" placeholder=\"2020-01-01\" onChange={handleSetFromDate} />\n              </div>\n              <div className=\"form-inputs__input\">\n                To <input type=\"text\" placeholder=\"2020-12-31\" onChange={handleSetToDate} />\n              </div>\n            </div>\n            <button type=\"submit\">Select days</button>\n          </form>\n        </div>\n        <div className=\"content\">\n          {bitcoin && <Display bitcoin={bitcoin} />}\n        </div>\n      </div>\n      <img src={scrooge} className=\"footer-img\" />\n    </div>\n  )\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('page')\n);\n"],"sourceRoot":""}